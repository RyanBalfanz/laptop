#!/usr/bin/env bash
# This file:
#
#  - Bootstraps a Mac (change this for your script)
#
# Usage:
#
#  sh ./install.sh 2>&1 | tee ./laptop.log
#
# Based on a template by BASH3 Boilerplate v2.3.0
# http://bash3boilerplate.sh/#authors

# We wrap the entire script in a big function which we only call at the very end, in order to
# protect against the possibility of the connection dying mid-script. This protects us against
# the problem described in this blog post:
#   http://blog.existentialize.com/dont-pipe-to-your-shell.html
_() {

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Catch the error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
# set -o xtrace

# https://github.com/thoughtbot/laptop/blob/581e50e6a978c5b2d2c68134541437b02d6108d5/mac#L7
fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n==> $fmt\\n" "$@"
}


# Set up this Mac
fancy_echo "Setting up $(whoami)'s Mac…"


# Check for Homebrew and install if we don't have it
ensure_homebrew() {
  fancy_echo "Ensure Homebrew is installed…"
  if test ! "$(command -v brew)"; then
    fancy_echo "Homebrew (http://brew.sh/) is not installed! 👎"
    fancy_echo "Installing Homebrew"
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  else
    fancy_echo "✅"
  fi
}


# Update Homebrew
# https://github.com/Homebrew/homebrew-bundle
run_brew_update() {
  fancy_echo "Updating Homebrew…"
  brew update
}


# Installing Homebrew Packages
# https://github.com/Homebrew/homebrew-bundle
run_brew_bundle() {
  fancy_echo "Installing Homebrew Packages…"
  brew bundle --file=- <<EOF
# tap "sambadevi/powerlevel9k"

# Minimal
# -------

brew "git"
brew "htop"
brew "openssl"
brew "tmux"
brew "tree"
brew "vim"
brew "zsh-completions"
brew "zsh-syntax-highlighting"
brew "zsh"

# Optional
# --------

# brew "dos2unix"
# brew "heroku/brew/heroku"
# brew "imagemagick"
# brew "jdupes"
# brew "jq"
# brew "mailhog", restart_service: :changed
# brew "msmtp"
# brew "nginx", restart_service: :changed
# brew "node"
# brew "pipenv"
# brew "postgres", restart_service: :changed
# brew "pyenv"
# brew "redis", restart_service: :changed
# brew "sqlite"
# brew "supervisor", restart_service: :changed
# brew "yarn"
# brew "zlib"

# Minimal
# -------

cask "1password"
cask "dropbox"
cask "google-backup-and-sync"
cask "google-chrome"
cask "iterm2"
cask "spectacle"

# Optional
# --------

# cask "balenaetcher"
# cask "bitbar"
# cask "db-browser-for-sqlite"
# cask "docker"
# cask "gpg-suite-no-mail"
# cask "keybase"
# cask "ngrok"
# cask "openscad"
# cask "poedit"
# cask "postgres"
# cask "postico"
# cask "qubibox"
# cask "redis"
# cask "rowanj-gitx"
# cask "signal"
# cask "soundcleod"
# cask "spotify"
# cask "ultimaker-cura"
# cask "visual-studio-code"
# cask "vlc"
# cask "vnc-viewer"

# Installing X has failed! (on Travis CI)
# cask "homebrew/cask-drivers/synology-surveillance-station-client"
# cask "philips-hue-sync"
# cask "synology-drive"
EOF
  fancy_echo "✅"
}


# Cleanup Homebrew
run_brew_cleanup() {
  fancy_echo "Run brew cleanup…"
  brew cleanup || true
  fancy_echo "✅"
}


# Ensure ZSH
ensure_zshell() {
  fancy_echo "Ensure your shell is Z shell (Zsh)…"
  if [ "$(command -v zsh)" != '/usr/local/bin/zsh' ] ; then
    fancy_echo "Changing your shell to zsh…"
    chsh -s "$(command -v zsh)" "$USER"
  else
      fancy_echo "✅"
  fi
}


# All done!
print_success() {
  fancy_echo "Done! 🍻"
}

# Now that the steps exist as functions, run them in an order that
# would result in a working install.
# handle_args "$@"
ensure_homebrew
run_brew_update
run_brew_bundle
run_brew_cleanup
ensure_zshell
print_success
}

# Now that we know the whole script has downloaded, run it.
_ "$0" "$@"
